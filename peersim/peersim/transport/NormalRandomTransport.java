/*
 * Copyright (c) 2003 The BISON Project
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

package peersim.transport;

import java.util.*;
import peersim.config.*;
import peersim.core.*;
import peersim.edsim.*;
import peersim.util.*;
import cern.jet.random.*;
import edu.cornell.lassp.houle.RngPack.*;


/**
 * In this transport layer, message delays are generated based on a 
 * normal distribution. The generated delay has the following
 * properties:
 * <ul>
 *   <li>In a given experiment, the latency associated 
 *     to any pair (source, destination) is fixed </li>
 *   <li>In different experiments, the latency generated
 *     by a pair (source, destination) may differ.</li>
 *   <li>The latency associated to (source,destination) is
 *     equal to the latency associated to (destination,source)
 * </ul> 
 *
 * @author Alberto Montresor
 * @version $Revision$
 */
public class NormalRandomTransport implements Transport
{

//---------------------------------------------------------------------
//Parameters
//---------------------------------------------------------------------

/** String name of the parameter used to configure the minimum latency */	
private static final String PAR_MEAN = "mean";	
	
/** String name of the parameter used to configure the maximum latency */	
private static final String PAR_STDDEV = "stddev";	
	
//---------------------------------------------------------------------
//Fields
//---------------------------------------------------------------------

/** Basic random element for random number generation */
private ConfigRandomElement element;

/** Random generator */
private Normal normal;

/** Seed generated by CommonRandom to allow for experiment reproducibility. */
private int seed1;

/** Seed generated by CommonRandom to allow for experiment reproducibility. */
private int seed2;

//---------------------------------------------------------------------
//Initialization
//---------------------------------------------------------------------

/**
 * Initializes this transport layer by reading the mean and standard
 * deviation. 
 */
public NormalRandomTransport(String prefix)
{
	double mean = Configuration.getDouble(prefix+ "." + PAR_MEAN);
	double stddev = Configuration.getDouble(prefix+ "." + PAR_STDDEV);
	element = new ConfigRandomElement();
	normal = new Normal(mean, stddev, element);
	seed1 = CommonRandom.r.nextInt();
	seed2 = CommonRandom.r.nextInt();
}

//---------------------------------------------------------------------

public Object clone()
{
	return this;
}

//---------------------------------------------------------------------
//Methods
//---------------------------------------------------------------------

// Comment inherited from interface
public void send(Node src, Node dest, Object msg, int pid)
{
	int delay = getLatency(src, dest);
	EDSimulator.add(delay, msg, dest, pid);
}

// Comment inherited from interface
public int getLatency(Node src, Node dest)
{
	int h1 = src.hashCode();
	int h2 = dest.hashCode();
	// Order values such that h1 <= h2
	if (h1 > h2) {
		int tmp = h1;
		h1 = h2;
		h2 = tmp;
	}
	element.setSeed(((long) h1) | ((long) h2) << 32);
	return (int) normal.nextDouble();
}

//---------------------------------------------------------------------
//Helper class
//---------------------------------------------------------------------


class ConfigRandomElement extends RandomElement {

	Random r;
	
	ConfigRandomElement()
	{
		r = new Random();
	}
	
	void setSeed(long seed)
	{
		r.setSeed(seed);
	}
		
	/**
	* Wrapper for <CODE>CommonRandom</CODE>
	@see RandomElement#raw()
	*/
	  public double raw() {
	  	return r.nextDouble();
	  }  
	}


}
